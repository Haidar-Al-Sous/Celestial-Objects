
//import { Material, RedFormat, TextureLoader } from 'three'

import './style.css'
import * as THREE from 'three'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
import { Group, Material, MeshPhongMaterial, RedFormat, TextureLoader } from 'three'
import gsap from 'gsap'
import * as dat from 'lil-gui'
var textureLoader = new THREE.TextureLoader();
// Canvas
const canvas = document.querySelector('canvas.webgl')
var r,m,Vx,Vy,Vz,Px,Py,Pz
// Scene
const scene = new THREE.Scene()
const celestialObjects = new THREE.Group()
scene.add(celestialObjects)
function SkyBoxSpace(){
    //z=500
    var uvss =[
        0.0, 0.0,
        1.0, 0.0,
        1.0, 1.0,
        1.0, 1.0,
        0.0,1.0,
        0.0,0.0
        ]
    var vertices = new Float32Array( 
        [
            -500,-500,-500,
             500,-500,-500,
             500,500,-500,
             500,500,-500,
             -500,500,-500,
            -500,-500,-500
        ]
     );
    var uvs = new Float32Array(uvss);

    var g1 = new THREE.BufferGeometry();
    g1.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
    g1.setAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
    textureLoader.load('a.png', function (texture){
    var material = new THREE.MeshBasicMaterial( {map: texture});
    var mesh = new THREE.Mesh( g1, material );
    scene.add(mesh);
    }, undefined, function (err) {
    console.error('texture not loaded', err)
    });


    //z=500
    vertices = new Float32Array( 
        [
             500,-500,500,
            -500,-500,500,
            -500,500,500,
            -500,500,500,
             500,500,500,
             500,-500,500
        ]
     );
     var g2 = new THREE.BufferGeometry();
     g2.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
     g2.setAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
     textureLoader.load('a.png', function (texture){
     var material = new THREE.MeshBasicMaterial( {map: texture});
     var mesh = new THREE.Mesh( g2, material );
     scene.add(mesh);
     }, undefined, function (err) {
     console.error('texture not loaded', err)
     });


//x=-500
vertices = new Float32Array( 
    [
        -500,-500,500,
        -500,-500,-500,
        -500,500,-500,
        -500,500,-500,
        -500,500,500,
        -500,-500,500
    ]
 );
 var g3 = new THREE.BufferGeometry();
 g3.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
 g3.setAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
 textureLoader.load('a.png', function (texture){
 var material = new THREE.MeshBasicMaterial( {map: texture});
 var mesh = new THREE.Mesh( g3, material );
 scene.add(mesh);
 }, undefined, function (err) {
 console.error('texture not loaded', err)
 });


//x=500
vertices = new Float32Array( 
    [
        500,-500,-500,
        500,-500,500,
        500,500,500,
        500,500,500,
        500,500,-500,
        500,-500,-500
    ]
 );
 var g4 = new THREE.BufferGeometry();
 g4.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
 g4.setAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
 textureLoader.load('a.png', function (texture){
 var material = new THREE.MeshBasicMaterial( {map: texture});
 var mesh = new THREE.Mesh( g4, material );
 scene.add(mesh);
 }, undefined, function (err) {
 console.error('texture not loaded', err)
 });
  
 //y=500
 vertices = new Float32Array( 
    [
        -500,500,-500,
        500,500,-500,
        500,500,500,
        500,500,500,
        -500,500,500,
        -500,500,-500
    ]
 );
 var g5 = new THREE.BufferGeometry();
 g5.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
 g5.setAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
 textureLoader.load('a.png', function (texture){
 var material = new THREE.MeshBasicMaterial( {map: texture});
 var mesh = new THREE.Mesh( g5, material );
 scene.add(mesh);
 }, undefined, function (err) {
 console.error('texture not loaded', err)
 });

 //y=-500
 vertices = new Float32Array( 
    [
        -500,-500,500,
        500,-500,500,
        500,-500,-500,
        500,-500,-500,
        -500,-500,-500,
        -500,-500,500
    ]
 );
 var g6 = new THREE.BufferGeometry();
 g6.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
 g6.setAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
 textureLoader.load('a.png', function (texture){
 var material = new THREE.MeshBasicMaterial( {map: texture});
 var mesh = new THREE.Mesh( g6, material );
 scene.add(mesh);
 }, undefined, function (err) {
 console.error('texture not loaded', err)
 });
}
const sizes = {
    width: window.innerWidth,
    height: window.innerHeight
}
window.addEventListener('resize', () =>
{
    // Update sizes
    sizes.width = window.innerWidth
    sizes.height = window.innerHeight

    // Update camera
    camera.aspect = sizes.width / sizes.height
    camera.updateProjectionMatrix()
    // Update renderer
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
})
// Camera

const camera = new THREE.PerspectiveCamera(20, sizes.width / sizes.height, 0.1, 2000)
var cameraX=30,cameraY=10,cameraZ=100,cameraAngle=0
camera.position.set(cameraX,cameraY,cameraZ)
document.addEventListener("keydown", onDocumentKeyDown, false);
function onDocumentKeyDown(event) {
var keyCode = event.which;
if (keyCode == 87)//W 
{
    cameraZ-=Math.cos(cameraAngle*Math.PI)*0.2
    cameraX-=Math.sin(cameraAngle*Math.PI)*0.2
}
if (keyCode == 83)//S
{
    cameraZ+=Math.cos(cameraAngle*Math.PI)*0.2
    cameraX+=Math.sin(cameraAngle*Math.PI)*0.2
}
if (keyCode == 65)//A
{
    cameraZ+=Math.sin(cameraAngle*Math.PI)*0.2
    cameraX-=Math.cos(cameraAngle*Math.PI)*0.2
}
if (keyCode == 68)//D
{
    cameraZ-=Math.sin(cameraAngle*Math.PI)*0.2
    cameraX+=Math.cos(cameraAngle*Math.PI)*0.2
    }
if (keyCode == 37)
{
   camera.rotation.y+=0.01*Math.PI
   cameraAngle+=0.01
    }
if (keyCode == 39)
{
    camera.rotation.y-=0.01*Math.PI
    cameraAngle-=0.01
}
if (keyCode == 38)
{
    cameraY+=0.2
    
}
if (keyCode == 40)
{
    cameraY-=0.2
 }
 camera.position.set(cameraX,cameraY,cameraZ)
}
scene.add(camera)

function sphere(name,r,Px,Py,Pz,t,Vx,Vy,Vz,m){
    const p  = new Float32Array(4608)//2304*2
    const uvs = new Float32Array( 3072)//1536*2
    let l=0,gg=0,ll=0,rr=r
    let xt
    let yt=1/2
    for (let aa = 0.0; aa <Math.PI/2; aa +=Math.PI/16)//288*8=2304 //192*8=1536
    {
        let xx=Math.cos(aa+Math.PI/16)*r
        let yy=Math.sin(aa+Math.PI/16)*r
        gg=xx
        xt=0
    for (let a=0.0;a<2*Math.PI;a+=Math.PI/8)//18 vertix for 6 points for  2 tr 18*8*2=288
    //18 vertex for 6 points for 12 vertex uvs 12*8*2=192
    {    
    let y =  Math.sin(aa) *r
  //1
  p[l]=rr*Math.sin(a)
  p[l+1]=y
  p[l+2]=rr*Math.cos(a)
 
  uvs[ll]=xt
  uvs[ll+1]=yt
 
   //3
   ll+=2
   l+=3
   p[l]=rr*Math.sin(a+Math.PI/8) 
   p[l+1]=y
   p[l+2]=rr*Math.cos(a+Math.PI/8)
 
   uvs[ll]=xt+(1/16)
   uvs[ll+1]=yt
    //4
    ll+=2
    l+=3
    p[l]= gg*Math.sin(a+Math.PI/8)
    p[l+1]=yy
    p[l+2]=gg*Math.cos(a+Math.PI/8)
 
    uvs[ll]=xt+(1/16)
    uvs[ll+1]=yt+(1/16)
   //4
   ll+=2
   l+=3
   p[l]= gg*Math.sin(a+Math.PI/8)
   p[l+1]=yy
   p[l+2]=gg*Math.cos(a+Math.PI/8) 
 
   uvs[ll]=xt+(1/16)
  uvs[ll+1]=yt+(1/16)
    //2
    ll+=2
    l+=3
    p[l]= gg*Math.sin(a)
    p[l+1]=yy
    p[l+2]=gg*Math.cos(a)
 
    uvs[ll]=xt
    uvs[ll+1]=yt+(1/16)
    //1
    ll+=2
    l+=3
    p[l]=rr*Math.sin(a)
    p[l+1]=y
    p[l+2]=rr*Math.cos(a)
   
    uvs[ll]=xt
    uvs[ll+1]=yt
   l+=3
   ll+=2
   xt+=(1/16)
    }
    yt+=(1/16)
    rr=gg
    }
    rr=r
    gg=0
    yt=(1/2)
    for (let aa = 0.0; aa <Math.PI/2; aa +=Math.PI/16)
    {
        let xx=Math.cos(aa+Math.PI/16)*r
        let yy=-Math.sin(aa+Math.PI/16)*r
        gg=xx
    
        xt=0
    for (let a=0.0;a<2*Math.PI;a+=Math.PI/8)//12 points for 4 tr
    {
 
    let y =-Math.sin(aa)*r
     //-2
     
     p[l]= gg*Math.sin(a)
     p[l+1]=yy
     p[l+2]=gg*Math.cos(a)
 
     uvs[ll]=xt
     uvs[ll+1]=yt-(1/16)
     //-4
     l+=3
     ll+=2
     p[l]= gg*Math.sin(a+Math.PI/8)
     p[l+1]=yy
     p[l+2]=gg*Math.cos(a+Math.PI/8)
 
     uvs[ll]=xt+(1/16)
     uvs[ll+1]=yt-(1/16)
      //-3
      l+=3
      ll+=2
      p[l]=rr*Math.sin(a+Math.PI/8) 
      p[l+1]=y
      p[l+2]=rr*Math.cos(a+Math.PI/8)
 
      uvs[ll]=xt+(1/16)
      uvs[ll+1]=yt
      //-3
      l+=3
      ll+=2
      p[l]=rr*Math.sin(a+Math.PI/8) 
      p[l+1]=y
      p[l+2]=rr*Math.cos(a+Math.PI/8)
 
      uvs[ll]=xt+(1/16)
      uvs[ll+1]=yt
      //-1
      l+=3
      ll+=2
      p[l]=rr*Math.sin(a)
      p[l+1]=y
      p[l+2]=rr*Math.cos(a)
 
      uvs[ll]=xt
      uvs[ll+1]=yt
      //-2
      l+=3
      ll+=2
      p[l]= gg*Math.sin(a)
      p[l+1]=yy
      p[l+2]=gg*Math.cos(a)
 
      uvs[ll]=xt
      uvs[ll+1]=yt-(1/16)
      l+=3
      ll+=2
      xt+=(1/16)
    }rr=gg
    yt-=(1/16)
}
 const geometry = new THREE.BufferGeometry()
 geometry.setAttribute( 'position', new THREE.BufferAttribute( p, 3 ) );
 geometry.setAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
textureLoader.load(t, function (texture){
        console.log('texture loaded');
        
        var material = new THREE.MeshBasicMaterial( {map: texture});
        var mesh = new THREE.Mesh( geometry, material );
        
        celestialObjects.add(mesh);
        mesh.position.set(Px,Py,Pz)
        mesh.name=name
        mesh.userData.m=m
        mesh.userData.Vx=Vx
        mesh.userData.Vy=Vy
        mesh.userData.Vz=Vz

    }, undefined, function (err) {
        console.error('texture not loaded', err)
        });

 }

//sphere(name,r,Px,Py,Pz,texture,Vx,Vy,Vz,m)
sphere('sun',4,17,1.9,20,'sun.jpg',0,0,0,5000000000)//r=14*10^5   
sphere('earth',1,37,2,30,'land_ocean_ice_cloud_2048.jpg',-0.01
,0,-0.11,1)//earth m*10^5
sphere('moom',1,50,1.95,22,'lroc_color_poles_1k.jpg',-0.01,0,-0.11,0.00000000000001)//moon  m*10^22 kg
SkyBoxSpace()
// Controls
//const controls = new OrbitControls(camera, canvas)
//controls.enableDamping = true

// Renderer
const renderer = new THREE.WebGLRenderer({
    canvas: canvas
})
renderer.setSize(sizes.width, sizes.height)
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))

// Animate*
const mouse={
    x:0,
    y:0
}
var raycaster = new THREE.Raycaster();
document.addEventListener( 'mousedown', onDocumentMouseDown, false );
function onDocumentMouseDown( event ) 
{
    mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
    mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
    console.log(mouse.x)
    console.log(mouse.y)
    var vector = new THREE.Vector3( mouse.x, mouse.y, 1 );
    raycaster.setFromCamera( mouse, camera );
    var intersects = raycaster.intersectObjects( celestialObjects.children );
    if (intersects.length>0)
    {   
        console.log(celestialObjects.children)
        console.log('aaaaaaaaaaaaaaaaaa')
    }
}

let distance,angleA,angleO,Fx,Fy,Fz
let ax,ay,az,dVx,dVy,dVz,dPx,dPy,dPz
let dt=1
const tick = () =>
{
   camera.lookAt(new THREE.Vector3(cameraX-Math.sin(cameraAngle*Math.PI),cameraY,cameraZ-Math.cos(cameraAngle*Math.PI)))
 
   for(let f=0;f<celestialObjects.children.length;f+=1)
   {
       for(let d=0;d<celestialObjects.children.length;d+=1)
       {
           if(f==d)
           continue;
           distance = celestialObjects.children[f].position.distanceTo(celestialObjects.children[d].position)
           angleA=Math.atan2(celestialObjects.children[d].position.z-celestialObjects.children[f].position.z,celestialObjects.children[f].position.x-celestialObjects.children[d].position.x)
           angleO=Math.atan2(celestialObjects.children[f].position.y-celestialObjects.children[d].position.y,celestialObjects.children[f].position.x-celestialObjects.children[d].position.x)
         //  console.log(distance)
           console.log(Math.sqrt(6.67408*Math.pow(10, -11)*celestialObjects.children[d].userData.m)/distance)
           Fx = (6.67408*Math.pow(10, -11)*celestialObjects.children[f].userData.m*celestialObjects.children[d].userData.m*Math.cos(angleA))/Math.pow(distance,2)
           Fy = (6.67408*Math.pow(10, -11)*celestialObjects.children[f].userData.m*celestialObjects.children[d].userData.m*Math.sin(angleO))/Math.pow(distance,2)//m*m
           Fz = (6.67408*Math.pow(10, -11)*celestialObjects.children[f].userData.m*celestialObjects.children[d].userData.m*Math.sin(angleA))/Math.pow(distance,2)
           
           Px=celestialObjects.children[f].position.x
           Py=celestialObjects.children[f].position.y
           Pz=celestialObjects.children[f].position.z
           ax=-Fx/celestialObjects.children[f].userData.m
           ay=-Fy/celestialObjects.children[f].userData.m
           az=Fz/celestialObjects.children[f].userData.m
           dVx=ax*dt
           dVy=ay*dt
           dVz=az*dt
           Vx=celestialObjects.children[f].userData.Vx
           Vy=celestialObjects.children[f].userData.Vy
           Vz=celestialObjects.children[f].userData.Vz
           Vx+=dVx
           Vy+=dVy
           Vz+=dVz
           celestialObjects.children[f].userData.Vx=Vx
           celestialObjects.children[f].userData.Vy=Vy
           celestialObjects.children[f].userData.Vz=Vz
           dPx=Vx*dt
           dPy=Vy*dt
           dPz=Vz*dt
           Px+=dPx
           Py+=dPy
           Pz+=dPz
           celestialObjects.children[f].position.set(Px,Py,Pz)
       }
       
   }
   
   renderer.render(scene, camera)
  
    // Call tick again on the next frame
    window.requestAnimationFrame(tick)
}

tick()




